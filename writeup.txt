writeup.txt
----------------------------------------------------------------------
2015 Spring Computer Graphics Assignment 4 - Physics Simulation 
Minoong Ji (minwongj@andrew.cmu.edu)
Professor Nancy Pollard
Carnegie Mellon University
----------------------------------------------------------------------

This program simulates basic physics including collisions, force, torque,
etc.

command to build:
cd build && rm -rf * && cmake ../src && make install

----------------------------------------------------------------------
Implemented Features
----------------------------------------------------------------------

All basic requirements are implemented.

- All collision detections
- Bound Volumes (Axis-Aligned Bounding Boxes)
- Applying force and torque
- Runge-Kutta 4 Integration
- Springs

Follwing additional feature is implemented.

- A game "Toss-Da-Balls!"
	Command to run:
	./p5 scenes/game.scene

----------------------------------------------------------------------
Design Decisions
----------------------------------------------------------------------

Design Directions

- Utilize provided structure as much as possible.
- Reduce unnecessary operations (eg. constructing transform matrix every frame)
 as much as possible.

Bounding Volume Hierarchy

- Axis-Aligned Bounding Boxes
	Created AABB data structure in Geometry class.
	AABBs are constructed in main.cpp, with a function call make_AABB().
	This process is done in PhysicsApplication::initialize(), after all the
	meshes are loaded into the scene object.
	make_AABB() is declared as a pure virtual function and classes that inherit
	Geometry implements it.

	Since AABB should be axis-aligned and should contain all the vertices of
	each object, transform matrices should have bulit before make_AABB() is
	called.
	
	make_transformation_matrix() and make_inverse_transformation_matrix() is
	called load_scene() in in scene_loader.cpp, whenever the loader parses
	geometry objects.

- "Broad phase" pass
	"Broad phase" pass is not implemented because of the following reasons.
	
	A simple octree structure was reviewed but because of the characteristics
	of scenes provided that there are not many bounding boxes, it was possible 
	to expect that the structure will harm the performance.

	Adaptive loose octrees or Kd-trees were likely enhance performance but it was hard
	to expect dramatic performance change compared to the cost of implementation.

RK4 Integrator

- To make RK4 integrate general-purpose, Physics::rk4() in physics.hpp
uses function pointer given as an argument. Phyics::evaluate() is being plugged
in to rk4() function to evaluate derivative at each step.
- However, for angular velocity and orientation, the function was expanded
inside Physics::step() because it was tricky to generalize the case since
cross product of angular velocity does not matches with orientation directly.

---------------------------------------------------------------------
Additional Feature - A simple game ("Toss-Da-Balls!")
----------------------------------------------------------------------

1) How to Run
	build the project and run with the command './p5 scenes/game.scene'

2) Rule
	You have to control a pad and block balls from hitting the deadly red ground.
	Try to beat developer's best time!
	Concentration and good sense of space are the keys to win!

3) Controls
	'i' move forward
	'k' move backward
	'j' move left
	'l' move right

4) Implementation

- application/camera_roam.cpp and hpp were copied and modified to create control for 
the pad (gameplane)
- transform matrix and inverse transform matrix is recalculated every physics step 
to translate AABB and vertices of the pad (p5/physics.cpp)
- p5/main.cpp was modified to instantiate gameplane_roam object
- game is over when a ball hits the ground. Shell prompts "GAME OVER!!!" message and \
elapsed time. 
- CMakefielList.txt under /src/application/ is modified to include gameplane_roam.cpp 
and gameplane_roam.hpp to the build structure

