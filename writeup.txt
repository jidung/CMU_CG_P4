writeup.txt
----------------------------------------------------------------------
2015 Spring Computer Graphics Assignment 4 - Physics Simulation 
Minoong Ji (minwongj@andrew.cmu.edu)
Professor Nancy Pollard
Carnegie Mellon University
----------------------------------------------------------------------

This program simulates basic physics including collisions, force, torque,
and etc.

command to build:
cd build && rm -rf * && cmake ../src && make install

----------------------------------------------------------------------
Implemented Features
----------------------------------------------------------------------

All basic requirements except bounding volume hierarchy are implemented.

- Collision detections between spheres and other spheres, triangles, planes, and models.
- Simulation of velocity and angular velocity for spheres along with force and torque
- Runge-Kutta 4 Integration
- Springs
- Gravity
- Collision damping and spring damping
- Bounding Volumes (Axis-Aligned Bounding Boxes)

Follwing additional feature is implemented.

1) A game "Toss-Da-Balls!"

	Specific description is at the end of this document.
 
 	Command to run:
	 $./p5 scenes/game.scene

2) Motion damping and Rotation damping

	Can be tested with following scenes under scenes/ folder.
	
	newtons_cradle_damping.scene
	rotation_test_damping.scene
	collision_damping.scene
	spring_rotation_damping.scene

----------------------------------------------------------------------
Design Decisions
----------------------------------------------------------------------

 One of the major goals was utilizing provided structure as much as possible.
 SphereBody::step_position() was used for Euler method integration first,
but soon altered with RK4 functions in Physics class. Ohter code schemes
such as SphereBody::apply_force() or Spring::step() were mostly maintained
and used with modification.

RK4 Integrator

- To make RK4 integrate general-purpose, Physics::rk4() in Physics class uses
	function pointer given as an argument. Phyics::evaluate() is being plugged
	in to rk4() function to evaluate derivative at each step.

	 However, for angular velocity and orientation, the function was expanded
	inside Physics::step() because it was tricky to generalize the case since
	cross product of angular velocity does not matches with orientation directly.


Bounding Volumes and Bounding Volume Hierarchy

- Axis-Aligned Bounding Boxes and Transformation Matrices
	AABB data structure is added in Geometry class.
	AABBs are constructed in main.cpp, with a function call make_AABB().
	This process is done in PhysicsApplication::initialize(), after all the
	meshes are loaded into the scene object.
	make_AABB() is declared as a pure virtual function and classes that inherit
	Geometry implements it.

	Since AABB should be axis-aligned and should contain all the vertices of
	each object, transform matrices should have bulit before make_AABB() is
	called.
	
	make_transformation_matrix() and make_inverse_transformation_matrix() is
	called load_scene() in in scene_loader.cpp, whenever the loader parses
	geometry objects.

- "Broad phase" pass
	"Broad phase" pass is not implemented because of the following reasons.
	
	A simple octree structure was considered but because of the characteristics
	of scenes provided that there are not many bounding boxes and the fact that
	spheres are moving constantly, it was possible to expect that the structure 
	will not make performance improvement.

	Adaptive loose octrees or Kd-trees were likely enhance performance but it was hard
	to expect dramatic performance change compared to the cost of implementation.



---------------------------------------------------------------------
Additional Feature - A simple game ("Toss-Da-Balls!")
----------------------------------------------------------------------

1) How to Run
	build the project and run with the command '$./p5 scenes/game.scene'

2) Rule
	You have to control a pad and block balls from hitting the deadly red ground.
	Try to beat developer's best time!
	Concentration and good sense of space are the keys to win!

3) Controls
	'i' move forward
	'k' move backward
	'j' move left
	'l' move right

4) Implementation

- application/camera_roam.cpp and hpp were copied and modified to create control for 
the game pad (gameplane).

- transform matrix and inverse transform matrix is recalculated every physics step 
to translate AABB and vertices of the pad (p5/physics.cpp)

- p5/main.cpp was modified to instantiate gameplane_roam object and handle events 
and update.

- game is over when a ball hits the ground. Shell prompts "GAME OVER!!!" message and 
elapsed time. 

- CMakefielList.txt under /src/application/ is modified to include gameplane_roam.cpp 
and gameplane_roam.hpp to the build structure

